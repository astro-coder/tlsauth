* tlsauth
  these are simple shell scripts that implement an x509 CA, similarly to tlsauth
** create a CA
    #+BEGIN_SRC sh
createca.sh <path-to-ca-dir> http://localhost/crl.pem
    #+END_SRC
** create https server certificate
    #+BEGIN_SRC sh
servercert.sh localhost
    #+END_SRC
** Sign server cert with CA
    #+BEGIN_SRC sh
cd <path-to-ca-dir>
signcert.sh <path-to-localhost.csr>
cd -
    #+END_SRC
** Create a client certificate
   #+BEGIN_SRC sh
gencert.sh user
   #+END_SRC
   send the resulting "user.csr" to the CA for signing. In this case
   you are both, but in a normal case this step is done by arbitrary
   users who send this csr file during the registration process to the
   site.

   Store user.key away somewhere safe offline, you'll need it later
   once more.
** CA signs users cert signing request
   #+BEGIN_SRC sh
cd <path-to-ca-dir>
signcert.sh <path-to-user.csr>
cd ..
   #+END_SRC
   CA sends back the signed 'user.cert" to the sender. As a
   convenience feature also the root CA cert should be sent to the
   user, so he can import this also in his CA store.
** Create PKCS#12 cert for your browser
   Using the returned cert from the CA we convert it together with the
   secret key part to a PKCS#12
   #+BEGIN_SRC sh
cert2pkcs12.sh <path-to-dir-with-user.pem|cert>
   #+END_SRC
   This asks for a passphrase which is needed only once when importing
   into the browser.
