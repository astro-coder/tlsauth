* tlsauth

This is a simple example how to setup TLS Certificate Authentication
for your services. The example is based on nginx and Flask.

Using tlsauth you can authenticate your users based on certificates
that you signed with your CA. This eliminates the need to remember
passwords and prohibits password bruteforcing. Using nginx, you can
even display totally different content depending if an request is
authenticated or not, routing unauthenticated users to static html for
example while authenticated users having access to some dynamic
content.

** CA and https service install

1. create a "localhost CA" in ./root-ca
    #+BEGIN_SRC sh
./createca.sh root-ca http://localhost/crl.pem
Country Name (2 letter code) [HU]:NA
Root CA Organization Name (eg, company) []:localhost CA
Common Name (server FQDN) []:localhost
Email Address []:user@localhost
    #+END_SRC
2. create https server certificate
    #+BEGIN_SRC sh
./servercert.sh localhost
    #+END_SRC
3. Sign server cert with CA
    #+BEGIN_SRC sh
cd root-ca
../signcert.sh localhost
cd -
    #+END_SRC
4. Setup nginx to serve
    #+BEGIN_SRC sh
server {
    listen        443;
    ssl on;
    server_name localhost;

    ssl_certificate      <pathto>/tlsauth/localhost.cert;
    ssl_certificate_key  <pathto>/tlsauth/localhost.key;
    ssl_client_certificate <pathto>/tlsauth/root-ca/public/root.pem;
    ssl_verify_client optional;

    location / {
       include uwsgi_params;
       uwsgi_param verified $ssl_client_verify;
       uwsgi_param dn $ssl_client_s_dn;
       if ( $ssl_client_verify = "SUCCESS") {
          uwsgi_pass 127.0.0.1:8080;
       }
       try_files $uri $uri/ /index.html;
    }
}
#+END_SRC
  don't forget to restart nginx
5. set up uwsgi
    #+BEGIN_SRC sh
edit tlsauth/tlsauth_wsgi.py
    #+END_SRC
6. install python dependencies
    #+BEGIN_SRC sh
virtualenv --distribute env
source env/bin/activate
pip install Flask uwsgi
    #+END_SRC

7. run flask application
    #+BEGIN_SRC sh
basedir=$PWD
env/bin/uwsgi --socket 127.0.0.1:8080 --chdir $basedir/tlsauth -pp $basedir -w tlsauth_wsgi -p 1 --virtualenv $basedir/env
    #+END_SRC

** Client side setup

1. Create a client certificate
   #+BEGIN_SRC sh
./gencert.sh user
   #+END_SRC

   send the resulting "user.csr" to the CA for signing. In this case
   you are both, but in a normal case this step is done by arbitrary
   users who send this csr file during the registration process to the
   site.

2. CA signs users cert signing request
   #+BEGIN_SRC sh
cd root-ca
../signcert.sh ../user
cd ..
   #+END_SRC

   CA sends back the signed 'user.cert" to the sender.

3. Create PKCS#12 cert for your browser
   Using the returned cert from the CA we convert it together with the secret key part to a PKCS#12
   #+BEGIN_SRC sh
/cert2pkcs12.sh user
   #+END_SRC

   This asks for a passphrase which is needed when importing into the browser.

4. Import the certificate in Firefox
  1. Using the menu open the Preferences dialog.
  2. Select the Advanced toolbar icon
  3. click on the "View certificates" button
  4. on the "Your Certificates" tab click on the "Import" button and load the file "user.cert.p12"

  if everything went ok the new certificate should appear under the "Your Certificates" tab

5. If you now surf to https://localhost with this firefox, the flask
   application should report back your distinguished name. If you
   browse to this location with another browser which lacks this
   certificate you will probably see the default nginx installation
   html page.
